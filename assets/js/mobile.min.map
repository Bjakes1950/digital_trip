{"version":3,"file":"mobile.min.js","sources":["../../assets_source/js/mobile.js"],"names":["initPhoneController","updateController","turn","turned","$","css","leftBreakThreshold","removeClass","leftTurnThreshold","addClass","rightBreakThreshold","rightTurnThreshold","server","window","location","origin","controller","wheel","status","show","addEventListener","rotate","orientation","transform","-ms-transform","-webkit-transform","-moz-transform","connect","gameCode","val","socket","io","on","emit","type","data","console","log","time","navigator","vibrate","hide","document","accelerate","event","preventDefault","a","alpha","g","beta","gamma","click","html","unbind","connnectOnEnter","k","keyCode","bind"],"mappings":"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","sourcesContent":["var initPhoneController = function() {\n    // Game config\n    var server = window.location.origin,\n        leftBreakThreshold = -3,\n        leftTurnThreshold = -20,\n        rightBreakThreshold = 3,\n        rightTurnThreshold = 20,\n        controller = $(\"#controller\"),\n        gameConnect = $(\"#gameConnect\"),\n        wheel = $(\"#wheel\"),\n        status = $(\"#status\"),\n        turned = false;\n\n    if( /iP(ad|od|hone)|Android|Blackberry|Windows Phone/i.test(navigator.userAgent) || true) {\n        // Show the controller ui with gamecode input\n        controller.show();\n        window.addEventListener('orientationchange', function(event) {\n            var rotate = 0 - window.orientation;\n            $(\"body\").css({\n                \"transform\": \"rotate(\"+rotate+\"deg)\",\n                \"-ms-transform\": \"rotate(\"+rotate+\"deg)\",\n                \"-webkit-transform\": \"rotate(\"+rotate+\"deg)\",\n                \"-moz-transform\": \"rotate(\"+rotate+\"deg)\"\n            });\n        }, false );\n        // When connect is pushed, establish socket connection\n        var connect = function() {\n            var gameCode = $(\"#socket input\").val(),\n            socket = io.connect(server);\n            // When server replies with initial welcome...\n            socket.on('welcome', function(data) {\n                // Send 'controller' device type with our entered game code\n                socket.emit(\"device\", {\"type\":\"controller\", \"gameCode\":gameCode});\n            });\n            socket.on(\"message\", function(data) {\n                if (data.type === \"vibr\") {\n                    console.log(\"vibtare\", data.time);\n                    navigator.vibrate(data.time);\n                }\n                if (data.type === \"gameover\") {\n                    console.log(\"gameover\");\n                    controller.hide();\n                    $(\"#gameover\").show();\n                }\n            });\n            // When game code is validated, we can begin playing...\n            socket.on(\"connected\", function(data) {\n\n                // Hide game code input, and show the vehicle wheel UI\n                $(\"#socket\").hide();\n                wheel.show();\n                // If user touches the screen, accelerate\n                document.addEventListener(\"touchstart\", function (event) {\n                    socket.emit(\"accelerate\", {'accelerate':true});\n                    $('#forward').addClass('active');\n                }, false);\n                // Stop accelerating if user stops touching screen\n                document.addEventListener(\"touchend\", function(event) {\n                    socket.emit(\"accelerate\", {'accelerate':false});\n                    $('#forward').removeClass('active');\n                }, false);\n                // Prevent touchmove event from cancelling the 'touchend' event above\n                document.addEventListener(\"touchmove\", function(event) {\n                    event.preventDefault();\n                }, false);\n                \n                // Steer the vehicle based on the phone orientation\n                window.addEventListener('deviceorientation', function(event) {\n                    var a = event.alpha, // \"direction\"\n                        b = event.beta,  // left/right 'tilt'\n                        g = event.gamma; // forward/back 'tilt'\n                    var turn = g;\n                    updateController(turn);\n                    // $('body').trigger('touchstart');\n                    socket.emit(\"turn\", {'turn':turn, 'g':a});\n                }, false);\n\n                window.addEventListener('MozOrientation', function(event) {\n                    var a = event.alpha, // \"direction\"\n                        b = event.beta,  // left/right 'tilt'\n                        g = event.gamma; // forward/back 'tilt'\n                    var turn = g;\n                    updateController(turn);\n                    socket.emit(\"turn\", {'turn':turn, 'g':a});\n                }, false);\n\n                if (!turned) {\n                    $(\"#turnLeft\").click(function () {\n                        socket.emit(\"click\", {\"click\":\"left\"});\n                    });\n                    $(\"#turnRight\").click(function () {\n                        socket.emit(\"click\", {\"click\":\"right\"});\n                    });\n                }\n\n                $(\".button\").show();\n                $(\"#M\").click(function () {\n                    socket.emit(\"click\", {\"click\":\"mute\"});\n                });\n                $(\"#P\").click(function () {\n                    socket.emit(\"click\", {\"click\":\"pause\"});\n                });\n                $(\"#restart\").click(function () {\n                    socket.emit(\"click\", {\"click\":\"restart\"});\n                    $(\"#gameover\").hide();\n                    controller.show();\n                });\n\n            });\n            socket.on(\"fail\", function() {\n                status.html(\"Failed to connect! Reload!\");\n            });\n            $(document).unbind(\"keyup\", connnectOnEnter);\n        };\n        var connnectOnEnter = function (event) {\n            var k = event.keyCode;\n            if (k === 13) {\n                connect();\n            }\n        };\n        $(\"#connect\").click(connect);\n        $(document).bind(\"keyup\", connnectOnEnter);\n    }\n    // Helper function to update controller UI\n    function updateController(turn) {\n        turned = true;\n        // Rotate forward indicator towards direction of vehicle\n        $('#forward').css('transform', 'rotate(' + (turn) + 'deg)');\n        // Activate/Deactivate turn / airbreak signals based on turn degree\n        if(turn < leftBreakThreshold) {\n            $('#stopRight, #turnRight').removeClass('active');\n            if(turn > leftTurnThreshold) {\n                $('#stopLeft').addClass('active');\n            } else {\n                $('#turnLeft').addClass('active');\n            }\n        } else if (turn > rightBreakThreshold) {\n            $('#stopLeft, #turnLeft').removeClass('active');\n            if(turn < rightTurnThreshold) {\n                $('#stopRight').addClass('active');\n            } else {\n                $('#turnRight').addClass('active');\n            }\n        } else {\n            $('#stopLeft, #turnLeft, #stopRight, #turnRight').removeClass('active');\n        }\n    }\n};"]}